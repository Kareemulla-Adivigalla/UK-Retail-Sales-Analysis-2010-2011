# -*- coding: utf-8 -*-
"""Sales Forecasting using Prophet Model for Weekly, Monthly and Quarterly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13V4zK44S6MWWhIihWmfIJH74nIDVaRNK
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

#to display plots inline
# %matplotlib inline

from google.colab import drive

# Mount Google Drive
drive.mount('/content/gdrive')

import pandas as pd

# Load the dataset
updated_data_path = '/content/gdrive/My Drive/Colab Notebooks/Sales Trends Analysis Project/Prepared_data.csv'
df_updated = pd.read_csv(updated_data_path)

# Convert sale_date to datetime format
df_updated['sale_date'] = pd.to_datetime(df_updated['sale_date'])

# Set sale_date as the index
df_updated.set_index('sale_date', inplace=True)

# Verify the conversion
df_updated.head()

# Install Prophet if not already installed
!pip install prophet

# Import Prophet
from prophet import Prophet

"""# WEEKLY SALES FORECASTING FOR 6 WEEKS"""

import pandas as pd

# Load the dataset
updated_data_path = '/content/gdrive/My Drive/Colab Notebooks/Sales Trends Analysis Project/Prepared_data.csv'
df_updated = pd.read_csv(updated_data_path)

# Convert sale_date to datetime format
df_updated['sale_date'] = pd.to_datetime(df_updated['sale_date'])

# Clean the total_sales_amount column
df_updated['total_sales_amount'] = df_updated['total_sales_amount'].replace(r'[^\d.]', '', regex=True).astype(float)

# Verify the cleaned data
df_updated[['sale_date', 'total_sales_amount']].head()

# Set sale_date as the index
df_updated.set_index('sale_date', inplace=True)

# Aggregate data by week (starting on Monday)
df_weekly = df_updated.resample('W-MON').sum().reset_index()
df_weekly = df_weekly[['sale_date', 'total_sales_amount']]
df_weekly.rename(columns={'sale_date': 'ds', 'total_sales_amount': 'y'}, inplace=True)

df_weekly.head()

# Initialize the Prophet model
from prophet import Prophet

model_weekly = Prophet()

# Fit the model on weekly aggregated data
model_weekly.fit(df_weekly)

# Create future dataframe for 6 weeks
future_weekly = model_weekly.make_future_dataframe(periods=6, freq='W')

# Predict the future sales
forecast_weekly = model_weekly.predict(future_weekly)

# Display the forecasted values
forecast_weekly[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(6)

import matplotlib.pyplot as plt

# Create future dataframe for 6 weeks
future_weekly = model_weekly.make_future_dataframe(periods=6, freq='W')

# Predict the future sales for the next 6 weeks
forecast_weekly = model_weekly.predict(future_weekly)

# Extract the forecasted values for the next 6 weeks
forecast_6_weeks = forecast_weekly[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(6)

# Print the 6-week forecasted values
print("6-Weeks Sales Forecast:")
print(forecast_6_weeks)

# Set the figure size to make the graph larger
plt.figure(figsize=(14, 8))  # Increase width and height of the graph

# Plot the weekly forecast
fig_weekly = model_weekly.plot(forecast_weekly)

# Add a title and labels
plt.title('6-Weeks Sales Forecast', fontsize=20)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Sales', fontsize=14)

# Annotate specific points on the graph
for i in range(-6, 0):  # Annotate the last 6 points in the forecast
    plt.annotate(
        f"{forecast_weekly['yhat'].iloc[i]:.2f}",  # Value to annotate (rounded to 2 decimal places)
        (forecast_weekly['ds'].iloc[i], forecast_weekly['yhat'].iloc[i]),  # Coordinates of the point
        textcoords="offset points",  # Positioning relative to the point
        xytext=(0, 10),  # Offset for the text (x, y)
        ha='center',  # Horizontal alignment
        fontsize=12,  # Font size for better visibility
        color='blue'  # Text color
    )

# Display the graph
plt.show()

"""# Interpretation of the 6-Weeks Sales Forecast

1. Sales Forecast Overview:

- The graph shows the forecasted weekly sales for the next 6 weeks. The black dots represent actual sales data, and the blue line represents the forecasted sales trend.

- The shaded area around the forecast line is the prediction interval, showing the range where actual sales are expected to fall, with a certain confidence level.

2. Key Forecasted Values:

- Week 1 (2011-12-18): £184,624.57

- Week 2 (2011-12-25): £186,801.49

- Week 3 (2012-01-01): £188,978.41

- Week 4 (2012-01-08): £191,155.33

- Week 5 (2012-01-15): £193,332.24

- Week 6 (2012-01-22): £195,509.16

3. Prediction Interval:

Wider Over Time: The prediction intervals get slightly wider as we move forward, meaning there's more uncertainty in the forecasts further out.



**Key Findings:**

- The forecasted sales closely match the actual sales data, especially in the earlier weeks. The model is effectively capturing the sales trend.

- The forecast shows a consistent upward trend in sales, growing from £184,624.57 in Week 1 to £195,509.16 in Week 6.

- The forecast intervals are relatively narrow, suggesting moderate confidence in the predictions. The model is reasonably sure about where sales will likely fall, but some variability is expected.


Actionable Recommendations:
- Increasing inventory to match the forecasted rise in sales, ensure that to meet customer demand without running out of stock. Preparing for the increased sales by adjusting staff schedules, especially during the peak weeks.

- Using the positive sales momentum to time your marketing campaigns. Focusing on promotions during the weeks where sales are forecasted to be higher.

- Keeping a close eye on actual sales versus the forecast. This will help us to quickly adjust operations and strategies if sales deviate from the forecasted trend.

# Monthly Sales Forecasting for 6 Months
"""

import pandas as pd

# Load the dataset
updated_data_path = '/content/gdrive/My Drive/Colab Notebooks/Sales Trends Analysis Project/Prepared_data.csv'
df_updated = pd.read_csv(updated_data_path)

# Convert sale_date to datetime format
df_updated['sale_date'] = pd.to_datetime(df_updated['sale_date'])

# Clean the total_sales_amount column by removing non-numeric characters
df_updated['total_sales_amount'] = df_updated['total_sales_amount'].replace(r'[^\d.]', '', regex=True).astype(float)

# Verify the cleaned data
df_updated[['sale_date', 'total_sales_amount']].head()

# Set sale_date as the index
df_updated.set_index('sale_date', inplace=True)

# Aggregate data by month
df_monthly = df_updated.resample('M').sum().reset_index()
df_monthly = df_monthly[['sale_date', 'total_sales_amount']]
df_monthly.rename(columns={'sale_date': 'ds', 'total_sales_amount': 'y'}, inplace=True)

df_monthly.head()

from prophet import Prophet

# Initialize the Prophet model
model_monthly = Prophet()

# Fit the model on monthly aggregated data
model_monthly.fit(df_monthly)

# Create future dataframe for 6 months
future_monthly = model_monthly.make_future_dataframe(periods=6, freq='M')

# Predict the future sales
forecast_monthly = model_monthly.predict(future_monthly)

# Display the forecasted values
forecast_monthly[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(6)

import matplotlib.pyplot as plt

# Create future dataframe for 6 months
future_monthly = model_monthly.make_future_dataframe(periods=6, freq='M')

# Predict the future sales for the next 6 months
forecast_monthly = model_monthly.predict(future_monthly)

# Extract the forecasted values for the next 6 months
forecast_6_months = forecast_monthly[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(6)

# Print the 6-month forecasted values
print("6-Month Sales Forecast:")
print(forecast_6_months)

# Set the figure size to make the graph larger
plt.figure(figsize=(14, 8))  # Increase width and height of the graph

# Plot the monthly forecast
fig_monthly = model_monthly.plot(forecast_monthly)

# Add a title and labels
plt.title('6-Months Sales Forecast', fontsize=20)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Sales', fontsize=14)

# Annotate specific points on the graph
for i in range(-6, 0):  # Annotate the last 6 points in the forecast
    plt.annotate(
        f"{forecast_monthly['yhat'].iloc[i]:.2f}",  # Value to annotate
        (forecast_monthly['ds'].iloc[i], forecast_monthly['yhat'].iloc[i]),  # Coordinates
        textcoords="offset points",  # Positioning of the text
        xytext=(0, 10),  # Distance from the point (x, y)
        ha='center',  # Horizontal alignment
        fontsize=12,  # Font size for better visibility
        color='blue'  # Text color
    )

# Display the graph
plt.show()

"""# Interpretation of the 6-Month Sales Forecast

- The graph shows the forecasted monthly sales for the next 6 months. The actual sales data is represented by black dots, and the blue line represents the forecasted sales trend.

- The shaded area around the forecast line indicates the prediction interval, representing the range within which actual sales are expected to fall with a certain level of confidence.

**Key Forecasted Values:**

- Month 1 (January 2012): £692,519.49

- Month 2 (February 2012): £715,820.75

- Month 3 (March 2012): £740,728.98

- Month 4 (April 2012): £764,833.73

- Month 5 (May 2012): £789,741.96

- Month 6 (June 2012): £813,846.71

- The prediction intervals widen as time progresses, indicating increasing uncertainty in the forecasts for the later months.

**Key Findings:**

- The model forecasts a consistent increase in sales over the next 6 months, with sales expected to grow from £692,519.49 in January 2012 to £813,846.71 in June 2012.

- The upward trend in the forecast indicates strong sales momentum moving into mid-2012.

- The prediction intervals show moderate confidence in the forecasts, with wider intervals in later months suggesting more uncertainty. This means that while the general trend is likely accurate, actual sales may vary within the predicted range.

**Actionable Recommendations:**

- Increasing inventory levels gradually to match the growing sales, ensuring that you have enough stock to meet demand each month.

- Aligning marketing campaigns with the forecasted growth periods, and introducing promotions or new product launches during the months with higher forecasted sales to capitalize on the expected demand.

- Regularly comparing actual sales to the forecast to identify any deviations early. If sales deviate significantly from the forecast, adjust inventory, marketing, and sales strategies accordingly.

# Sales Forecasting for Next 4 Quarters
"""

import pandas as pd

# Load the dataset
updated_data_path = '/content/gdrive/My Drive/Colab Notebooks/Sales Trends Analysis Project/Prepared_data.csv'
df_updated = pd.read_csv(updated_data_path)

# Convert sale_date to datetime format
df_updated['sale_date'] = pd.to_datetime(df_updated['sale_date'])

# Set sale_date as the index
df_updated.set_index('sale_date', inplace=True)

# Verify the conversion
df_updated.head()

df_updated.info()

# Check the columns in your DataFrame
print(df_updated.columns)

# Check if 'sale_date' is the index
print(df_updated.index)

# Reset the index to turn 'sale_date' into a regular column
df_updated = df_updated.reset_index()

# Verify the DataFrame
print(df_updated.head())

# Check the columns in your DataFrame
print(df_updated.columns)

import pandas as pd

# Ensure 'total_sales_amount' is numeric
df_updated['total_sales_amount'] = pd.to_numeric(df_updated['total_sales_amount'], errors='coerce')

# Verify if there are any NaN values after conversion
print(df_updated['total_sales_amount'].isna().sum())

# Fill NaN values with 0 in 'total_sales_amount'
df_updated['total_sales_amount'] = df_updated['total_sales_amount'].fillna(0)

# Verify that NaN values have been filled
print(df_updated['total_sales_amount'].isna().sum())

# Aggregate the data by quarter, summing up the total sales
df_quarterly_sales = df_updated.resample('Q', on='sale_date')['total_sales_amount'].sum().reset_index()

# Rename the columns to 'ds' and 'y' as required by Prophet
df_quarterly_sales.rename(columns={'sale_date': 'ds', 'total_sales_amount': 'y'}, inplace=True)

# Verify the prepared data
print(df_quarterly_sales.head())

from prophet import Prophet

# Initialize the Prophet model
model_quarterly = Prophet()

# Fit the model on the quarterly aggregated data
model_quarterly.fit(df_quarterly_sales)

# Create a future dataframe for the next 4 quarters
future_quarterly = model_quarterly.make_future_dataframe(periods=4, freq='Q')

# Predict the future sales for the next 4 quarters
forecast_quarterly = model_quarterly.predict(future_quarterly)

# Extract the forecasted values for the next 4 quarters
forecast_4_quarters = forecast_quarterly[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(4)

# Print the 4-quarter forecasted values
print("4-Quarter Sales Forecast:")
print(forecast_4_quarters)

import matplotlib.pyplot as plt

# Set the figure size to make the graph larger
plt.figure(figsize=(14, 8))

# Plot the quarterly forecast
fig_quarterly = model_quarterly.plot(forecast_quarterly)

# Add a title and labels
plt.title('4-Quarters Sales Forecast', fontsize=20)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Sales', fontsize=14)

# Annotate specific points on the graph
for i in range(-4, 0):  # Annotate the last 4 points in the forecast
    plt.annotate(
        f"{forecast_quarterly['yhat'].iloc[i]:.2f}",  # Value to annotate
        (forecast_quarterly['ds'].iloc[i], forecast_quarterly['yhat'].iloc[i]),  # Coordinates
        textcoords="offset points",  # Positioning of the text
        xytext=(0, 10),  # Distance from the point (x, y)
        ha='center',  # Horizontal alignment
        fontsize=12,  # Font size for better visibility
        color='blue'  # Text color
    )

# Display the graph
plt.show()

"""# Interpretation of the 4-Quarters Sales Forecast

- The graph shows the forecasted quarterly sales for the next 4 quarters. Actual sales data points are marked with black dots, while the blue line represents the forecasted sales trend.

- The shaded area around the forecast line is the prediction interval, indicating the range where actual sales are expected to fall within each quarter, with a certain confidence level.

**Key Forecasted Values:**

- Quarter 1 (Q1 2012): £2,436,832.78

- Quarter 2 (Q2 2012): £2,797,689.41

- Quarter 3 (Q3 2012): £3,162,511.50

- Quarter 4 (Q4 2012): £3,527,333.59

- The prediction intervals widen as the quarters progress, showing increased uncertainty in the forecasts further into the future.

**Key Findings:**

- The model predicts strong and steady growth in sales over the next 4 quarters, with sales increasing from £2.44 million in Q1 2012 to £3.53 million in Q4 2012.

- The upward trend indicates sustained sales momentum throughout 2012.

- The prediction intervals are wider, especially in later quarters, suggesting that while the general trend is positive, there is some uncertainty regarding the exact sales figures. This means actual sales could vary within a broader range.

**Actionable Recommendations:**

- Allocation additional resources for production, inventory, and staffing in anticipation of the growing sales, especially in Q3 and Q4 2012.

- Planning and schedule long-term marketing campaigns to align with the forecasted sales growth, focusing on product launches, seasonal promotions, or other significant events to drive sales higher during peak quarters.

- Developing contingency plans for both higher-than-expected and lower-than-expected sales scenarios, particularly in Q3 and Q4. This could involve flexible supply chain arrangements or variable marketing budgets to adapt to different sales outcomes.

# Evaluating Prophet model for weekly, monthly, and quarterly sales forecasting
"""

import pandas as pd

# Ensure sale_date is in datetime format
df_updated['sale_date'] = pd.to_datetime(df_updated['sale_date'])

# Weekly aggregation
df_weekly_sales = df_updated.resample('W', on='sale_date')['total_sales_amount'].sum().reset_index()

# Monthly aggregation
df_monthly_sales = df_updated.resample('M', on='sale_date')['total_sales_amount'].sum().reset_index()

# Quarterly aggregation
df_quarterly_sales = df_updated.resample('Q', on='sale_date')['total_sales_amount'].sum().reset_index()

# Rename columns to 'ds' (date) and 'y' (sales) as required by Prophet
df_weekly_sales.rename(columns={'sale_date': 'ds', 'total_sales_amount': 'y'}, inplace=True)
df_monthly_sales.rename(columns={'sale_date': 'ds', 'total_sales_amount': 'y'}, inplace=True)
df_quarterly_sales.rename(columns={'sale_date': 'ds', 'total_sales_amount': 'y'}, inplace=True)

from prophet import Prophet

# Initialize the Prophet models
model_weekly = Prophet()
model_monthly = Prophet()
model_quarterly = Prophet()

# Fit the models
model_weekly.fit(df_weekly_sales)
model_monthly.fit(df_monthly_sales)
model_quarterly.fit(df_quarterly_sales)

# Create future dataframes
future_weekly = model_weekly.make_future_dataframe(periods=6, freq='W')
future_monthly = model_monthly.make_future_dataframe(periods=6, freq='M')
future_quarterly = model_quarterly.make_future_dataframe(periods=4, freq='Q')

# Make predictions
forecast_weekly = model_weekly.predict(future_weekly)
forecast_monthly = model_monthly.predict(future_monthly)
forecast_quarterly = model_quarterly.predict(future_quarterly)

from sklearn.metrics import mean_absolute_error

# Weekly MAE
mae_weekly = mean_absolute_error(df_weekly_sales['y'], forecast_weekly.loc[forecast_weekly['ds'].isin(df_weekly_sales['ds']), 'yhat'])
print(f"Weekly MAE: {mae_weekly:.2f}")

# Monthly MAE
mae_monthly = mean_absolute_error(df_monthly_sales['y'], forecast_monthly.loc[forecast_monthly['ds'].isin(df_monthly_sales['ds']), 'yhat'])
print(f"Monthly MAE: {mae_monthly:.2f}")

# Quarterly MAE
mae_quarterly = mean_absolute_error(df_quarterly_sales['y'], forecast_quarterly.loc[forecast_quarterly['ds'].isin(df_quarterly_sales['ds']), 'yhat'])
print(f"Quarterly MAE: {mae_quarterly:.2f}")

from sklearn.metrics import mean_squared_error
import numpy as np

# Weekly RMSE
rmse_weekly = np.sqrt(mean_squared_error(df_weekly_sales['y'], forecast_weekly.loc[forecast_weekly['ds'].isin(df_weekly_sales['ds']), 'yhat']))
print(f"Weekly RMSE: {rmse_weekly:.2f}")

# Monthly RMSE
rmse_monthly = np.sqrt(mean_squared_error(df_monthly_sales['y'], forecast_monthly.loc[forecast_monthly['ds'].isin(df_monthly_sales['ds']), 'yhat']))
print(f"Monthly RMSE: {rmse_monthly:.2f}")

# Quarterly RMSE
rmse_quarterly = np.sqrt(mean_squared_error(df_quarterly_sales['y'], forecast_quarterly.loc[forecast_quarterly['ds'].isin(df_quarterly_sales['ds']), 'yhat']))
print(f"Quarterly RMSE: {rmse_quarterly:.2f}")

"""# Key Findings


**Weekly Sales Forecasting**


- Sales are forecasted to increase from £0.18 million in Week 1 (December 18, 2011) to £0.20 million in Week 6 (January 22, 2012).

**Accuracy:**
- Mean Absolute Error (MAE): £26,488.42 (~£0.03 million)
- Root Mean Squared Error (RMSE): £33,627.31 (~£0.03 million)


The prediction intervals show moderate confidence, with expected sales in:
- Week 1 (December 18, 2011): between £0.14 million and £0.23 million.
- Week 6 (January 22, 2012): between £0.15 million and £0.24 million.


**Monthly Sales Forecasting**

Sales are expected to rise from £0.69 million in January 2012 to £0.81 million in June 2012.

Accuracy:
- Mean Absolute Error (MAE): £118,556.93 (~£0.12 million)
- Root Mean Squared Error (RMSE): £162,732.54 (~£0.16 million)

- The prediction intervals widen slightly as the months progress, reflecting increased uncertainty:

- January 2012: Sales are expected to be between £0.47 million and £0.90 million.
- June 2012: Sales are expected to be between £0.60 million and £1.02 million.


**Quarterly Sales Forecasting**

- Sales are projected to grow from £2.44 million in Q1 2012 to £3.53 million in Q4 2012.

Accuracy:
- Mean Absolute Error (MAE): £104,900.00 (~£0.10 million)
- Root Mean Squared Error (RMSE): £132,392.12 (~£0.13 million)

The intervals are broader, especially in the later quarters, indicating more uncertainty:

- Q1 2012: Sales are expected to be between £1.57 million and £3.31 million.
- Q4 2012: Sales are expected to be between £2.28 million and £4.77 million.


# Actionable Recommendations


**Short-Term Operational Efficiency (Weekly)**

- Ensuring inventory levels are aligned with the forecasted increase in sales, particularly as sales are expected to reach £0.20 million in Week 6.

- Adjusting staffing levels to meet the increasing demand, especially during the weeks where sales are forecasted to peak at £0.20 million.

- Scheduling targeted promotions to leverage the sales growth trend, focusing on the weeks with higher forecasted sales.


**Medium-Term Planning (Monthly)**

- Increase inventory levels gradually in line with the forecasted rise in sales, which is expected to grow to £0.81 million by June 2012.

- Implementing marketing strategies that align with the expected sales growth, especially during months where sales exceed £0.75 million.

- Regularly compare actual sales to the forecast to detect and address any deviations early.


**Long-Term Strategic Decision-Making (Quarterly)**

- Planning for increased resource allocation as sales are expected to reach £3.53 million by Q4 2012.

- Developing contingency plans for different sales scenarios, particularly for Q3 and Q4, where sales could range between £2.28 million and £4.77 million.

- Setting up regular quarterly reviews to assess and adjust business strategies based on actual performance against the forecast.
"""

