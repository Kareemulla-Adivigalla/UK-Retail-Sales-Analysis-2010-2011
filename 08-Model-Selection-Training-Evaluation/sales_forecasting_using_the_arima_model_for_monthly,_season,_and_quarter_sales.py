# -*- coding: utf-8 -*-
"""Sales Forecasting using the ARIMA model for Monthly, Season, and Quarter sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12sAC26jAPRZh4SdDDhoSljHJxCr69Jd8
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

#to display plots inline
# %matplotlib inline

from google.colab import drive

# Mount Google Drive
drive.mount('/content/gdrive')

# Load the saved dataset
updated_data_path = '/content/gdrive/My Drive/Colab Notebooks/Sales Trends Analysis Project/updated_sales_dataset_with_features.csv'
df_updated = pd.read_csv(updated_data_path)

# Display the first few rows to verify the dataset
df_updated.head()

df_updated.info()

"""# Performing sales forecasting using the ARIMA model for Monthly, Season, and Quarter sales.

# Monthly, Season, and Quarter sales forecasting.

# 1) Monthly Sales Forecasting

**Monthly Sales Data Preparation**
"""

# Aggregate data by Month
monthly_sales = df_updated.groupby(['Year', 'Month'])['Total_Sales'].sum().reset_index()

# Convert Year and Month to a datetime format
monthly_sales['Date'] = pd.to_datetime(monthly_sales[['Year', 'Month']].assign(DAY=1))

# Set the Date as the index
monthly_sales.set_index('Date', inplace=True)

# Prepare the series for ARIMA
monthly_sales_series = monthly_sales['Total_Sales']

"""**Fitting the ARIMA Model**"""

from statsmodels.tsa.arima.model import ARIMA

# Fit the ARIMA model
model_monthly = ARIMA(monthly_sales_series, order=(5, 1, 0))
model_monthly_fit = model_monthly.fit()

# Print the summary
print(model_monthly_fit.summary())

"""**Forecasting with ARIMA**

**Forecasting Monthly Sales**
"""

# Forecast the next 12 months
monthly_forecast = model_monthly_fit.forecast(steps=12)

# Plot the forecast
monthly_sales_series.plot(label='Observed')
monthly_forecast.plot(label='Forecast', color='red')
plt.title('Monthly Sales Forecast')
plt.legend()
plt.show()

"""**Visualization Analysis**

**Observed vs. Forecasted Sales:**

- The plot shows the actual (observed) sales data in blue and the forecasted values in red. The observed sales exhibit a noticeable upward trend with significant fluctuations, especially towards the end of the observed period.

- The forecasted values, however, show a clear deviation from the observed trend, especially after the model starts forecasting. The model struggles to capture the sharp increase in sales seen in the observed data.
Actionable Recommendations

**Evaluation of Forecasts for Monthly Sales**
"""

from sklearn.metrics import mean_absolute_error, mean_squared_error

# Example: Evaluation for Monthly Sales
mae_monthly = mean_absolute_error(monthly_sales_series[-12:], monthly_forecast)
rmse_monthly = mean_squared_error(monthly_sales_series[-12:], monthly_forecast, squared=False)

print(f'Monthly Sales MAE: {mae_monthly}')
print(f'Monthly Sales RMSE: {rmse_monthly}')

"""**Interpretation of MAE and RMSE Metrics**

**Mean Absolute Error (MAE):**

- The MAE of 171,138.97 indicates the average absolute difference between the predicted and actual sales values. This value is relatively high, suggesting the model might not be performing well in terms of prediction accuracy.

**Root Mean Square Error (RMSE):**

- The RMSE of 205,563.49 is also quite high, indicating that the model has a significant error in its predictions. RMSE penalizes larger errors more than MAE, further highlighting the model's struggle with accurately forecasting monthly sales.

**Actionable Recommendations**

**Model Refinement:**

- Reevaluate the ARIMA Model Parameters: Given the lack of significance in the autoregressive terms, you may want to explore different (p, d, q) combinations or even use grid search to find a better-fitting model.

- Consider Seasonal Models: Since the sales data appears to have seasonal patterns, exploring a SARIMA (Seasonal ARIMA) model could better capture the seasonal components, potentially improving forecast accuracy.

- Incorporate External Factors: Consider adding external regressors, such as marketing activities, holidays, or economic indicators, to the model to help explain the observed volatility and improve the forecast.

**Alternative Models:**

- Try Prophet: Prophet, developed by Facebook, is particularly effective in handling seasonality and trends. Given the high volatility and seasonal patterns in the data, Prophet might provide better results.

- Explore Machine Learning Models: Machine learning approaches like Random Forest, XGBoost, or even deep learning models like LSTMs could better capture complex patterns in the data.

# 2) Seasonal Sales Forecasting

**Seasonal Sales Data Preparation**
"""

# Aggregate data by Season
season_sales = df_updated.groupby('Season')['Total_Sales'].sum().reindex(['Winter', 'Spring', 'Summer', 'Fall']).reset_index()

# Assume that each season represents a single point in time for simplicity (e.g., start of each season)
season_dates = pd.to_datetime(['2024-01-01', '2024-04-01', '2024-07-01', '2024-10-01'])

# Add the dates to the season sales data
season_sales['Date'] = season_dates

# Set the Date as the index
season_sales.set_index('Date', inplace=True)

# Prepare the series for ARIMA
season_sales_series = season_sales['Total_Sales']

"""**Fitting ARIMA for Seasonal Sales**"""

# Fit the ARIMA model
model_seasonal = ARIMA(season_sales_series, order=(1, 1, 0))  # Order might be simpler due to fewer data points
model_seasonal_fit = model_seasonal.fit()

# Print the summary
print(model_seasonal_fit.summary())

"""**Forecasting Seasonal Sales**"""

# Forecast the next 4 seasons
seasonal_forecast = model_seasonal_fit.forecast(steps=4)

# Plot the forecast
season_sales_series.plot(label='Observed')
seasonal_forecast.plot(label='Forecast', color='red')
plt.title('Seasonal Sales Forecast')
plt.legend()
plt.show()

"""**The plot shows the observed sales data in blue and the forecasted values in red. The observed sales exhibit a sharp increase towards the end of the period, but the forecast is a flat line at a constant level, indicating that the model is not capturing the trend or variability in the data.**

**Evaluation of Forecasts for Season Sales**
"""

from sklearn.metrics import mean_absolute_error, mean_squared_error

# Assuming the last 4 seasons are used for comparison
# Adjust this if you have more historical data to compare
mae_seasonal = mean_absolute_error(season_sales_series[-4:], seasonal_forecast)
rmse_seasonal = mean_squared_error(season_sales_series[-4:], seasonal_forecast, squared=False)

print(f'Seasonal Sales MAE: {mae_seasonal}')
print(f'Seasonal Sales RMSE: {rmse_seasonal}')

"""# Interpretation of MAE and RMSE Metrics

**Mean Absolute Error (MAE):**

- The MAE of 780,158.61 indicates the average absolute error between the forecasted and actual seasonal sales values. This high value suggests that the model's predictions are not very accurate.

**Root Mean Square Error (RMSE):**

- The RMSE of 892,870.37 is also quite high, indicating that the model has significant error in its predictions. RMSE penalizes larger errors more than MAE, highlighting the model's struggles with forecasting accuracy.

# Actionable Recommendations

**Model Improvement:**

**Reevaluate the ARIMA Model Parameters:**

- The lack of significance in the autoregressive term and the high error metrics, consider trying different (p, d, q) combinations or using grid search to find a better-fitting model.

**Consider Seasonal ARIMA (SARIMA):**

- Since the data is seasonal, using a SARIMA model with explicit seasonal components could better capture the seasonality in the sales data.

**Incorporate External Variables:**

- Adding external regressors, such as holiday periods, promotions, or economic indicators, could help explain the sharp changes in sales and improve forecast accuracy.

# 3) Quarterly Sales Forecasting

**Data Preparation**
"""

# Aggregate data by Quarter
quarter_sales = df_updated.groupby(['Year', 'Quarter'])['Total_Sales'].sum().reset_index()

# Convert Year and Quarter to a datetime format
quarter_sales['Date'] = pd.to_datetime(quarter_sales['Year'].astype(str) + 'Q' + quarter_sales['Quarter'].astype(str))

# Set the Date as the index
quarter_sales.set_index('Date', inplace=True)

# Prepare the series for ARIMA
quarter_sales_series = quarter_sales['Total_Sales']

"""**Fitting ARIMA for Quarterly Sales**"""

# Fit the ARIMA model
model_quarterly = ARIMA(quarter_sales_series, order=(5, 1, 0))
model_quarterly_fit = model_quarterly.fit()

# Print the summary
print(model_quarterly_fit.summary())

"""**Forecasting Quarterly Sales**"""

# Forecast the next 4 quarters
quarterly_forecast = model_quarterly_fit.forecast(steps=4)

# Plot the forecast
quarter_sales_series.plot(label='Observed')
quarterly_forecast.plot(label='Forecast', color='red')
plt.title('Quarterly Sales Forecast')
plt.legend()
plt.show()

"""**The plot shows that the observed sales exhibit an upward trend, but the forecasted values (in red) continue to increase at a linear rate, without capturing any potential seasonality or other dynamics present in the observed data. The forecast appears to be a simple linear extrapolation, which does not accurately reflect the actual sales pattern.**

**Evaluation of Forecasts for Quarterly Sales**
"""

from sklearn.metrics import mean_absolute_error, mean_squared_error

# Assuming the last 4 quarters are used for comparison
mae_quarterly = mean_absolute_error(quarter_sales_series[-4:], quarterly_forecast)
rmse_quarterly = mean_squared_error(quarter_sales_series[-4:], quarterly_forecast, squared=False)

print(f'Quarterly Sales MAE: {mae_quarterly}')
print(f'Quarterly Sales RMSE: {rmse_quarterly}')

"""**Interpretation  of MAE and RMSE Metrics**

**Mean Absolute Error (MAE):**

- The MAE of 1,515,730.98 indicates the average absolute error between the forecasted and actual quarterly sales values. This very high value suggests that the model's predictions are not accurate.

**Root Mean Square Error (RMSE):**

- The RMSE of 1,516,666.09 is also very high, indicating that the model has significant error in its predictions. RMSE penalizes larger errors more than MAE, highlighting the model's struggles with forecasting accuracy.

# Actionable Recommendations

**Model Improvement:**

**Reevaluate ARIMA Model Parameters:**

- Given the lack of significance in the autoregressive terms and the high error metrics, consider experimenting with different (p, d, q) combinations or using grid search to find a better-fitting model.

**Consider Adding Seasonal Components:**

- Since the data is quarterly, there may be seasonality present. Consider using a SARIMA model, which includes seasonal components, to better capture the quarterly patterns.

**Explore Alternative Models:**

- Prophet Model: Prophet, developed by Facebook, might better capture the trend and seasonality in quarterly data. Prophet is particularly effective at handling seasonality and trends, making it worth considering.

**Machine Learning Models:**

- Consider using machine learning models such as XGBoost or Random Forest, which can handle complex patterns and interactions, particularly if more features (e.g., lagged values, external variables) are added.
"""

